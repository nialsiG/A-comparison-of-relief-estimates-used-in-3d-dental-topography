# This code was developed under R 3.30. It uses the following packages: molaR; Morpho; Rvcg; sp

# Loading----
PLY <- Rvcg::vcgPlyRead(myplyfile, updateNormals = TRUE, clean = TRUE)
OCC.PLY <- Rvcg::vcgPlyRead(myplyfile_occlusal, updateNormals = TRUE, clean = TRUE)
NAME <- myplyname
THRESH <- as.numeric(myocclusalthreshold)

# Data preparation----
VERTEX2D <- rbind(PLY$vb[1:2, ], rep(0, length(PLY$vb[1, ])))
SURF2D <- matrix(0, nrow = length(PLY$it[1, ]), ncol = 1)
for (i in 1:length(PLY$it[1, ]))  {
  Nod <- PLY$it[, i]
  N1T <- VERTEX2D[, Nod[1]]
  N2T <- VERTEX2D[, Nod[2]]
  N3T <- VERTEX2D[, Nod[3]]
  Norme.N1N2 <- rbind(N1T, N2T)
  Norme.N2N3 <- rbind(N3T, N2T)
  Norme.N1N3 <- rbind(N3T, N1T)
  S1 <- dist(Norme.N1N2, method = "euclidean", diag = FALSE, upper = FALSE)
  S2 <- dist(Norme.N2N3, method = "euclidean", diag = FALSE, upper = FALSE)
  S3 <- dist(Norme.N1N3, method = "euclidean", diag = FALSE, upper = FALSE)
  Demi.somme <- (S1+S2+S3)/2
  Surface <- sqrt(Demi.somme*(Demi.somme-S1)*(Demi.somme-S2)*(Demi.somme-S3))
  SURF2D[i, ] <- Surface
}
VERTEX3D <- PLY$vb[1:3, ]
SURF3D <- matrix(0, nrow = length(PLY$it[1, ]), ncol = 1)
TR.ELEV <- matrix(0, nrow = length(PLY$it[1, ]), ncol = 1)
for (i in 1:length(PLY$it[1, ])) {
  Nod <- PLY$it[, i]
  N1T <- VERTEX3D[, Nod[1]]
  N2T <- VERTEX3D[, Nod[2]]
  N3T <- VERTEX3D[, Nod[3]]
  Norme.N1N2 <- rbind(N1T, N2T)
  Norme.N2N3 <- rbind(N3T, N2T)
  Norme.N1N3 <- rbind(N3T, N1T)
  S1 <- dist(Norme.N1N2, method = "euclidean", diag = FALSE, upper = FALSE)
  S2 <- dist(Norme.N2N3, method = "euclidean", diag = FALSE, upper = FALSE)
  S3 <- dist(Norme.N1N3, method = "euclidean", diag = FALSE, upper = FALSE)
  Demi.somme <- (S1+S2+S3)/2
  Surface <- sqrt(Demi.somme*(Demi.somme-S1)*(Demi.somme-S2)*(Demi.somme-S3))
  SURF3D[i, ] <- Surface
  Elev <- colMeans(rbind(N1T[3], N2T[3], N3T[3]))
  TR.ELEV[i, ] <- Elev
}
TR.NORM <- matrix(0, nrow = length(PLY$it[1,]), ncol = 3)
for (i in 1:length(TR.NORM[, 1])) {
  Nod <- PLY$it[, i]
  N1T <- VERTEX3D[, Nod[1]]
  N2T <- VERTEX3D[, Nod[2]]
  N3T <- VERTEX3D[, Nod[3]]
  N1N2 <- N2T - N1T
  N1N3 <- N3T - N1T
  Vect <- c((N1N2[2]*N1N3[3]-N1N2[3]*N1N3[2]), (N1N2[3]*N1N3[1]-N1N2[1]*N1N3[3]), (N1N2[1]*N1N3[2]-N1N2[2]*N1N3[1]))
  Norme.Vect <- sqrt(sum(Vect^2))
  TR.NORM[i, ] <- Vect/Norme.Vect
}

# Computation----
slope.fun <- function(x) {
  Hor.vector <- round(sqrt((x[1])^2+(x[2])^2), digits = 6)
  Normal.vector <- round(sqrt((x[1])^2+(x[2])^2+(n[3])^2), digits = 6)
  Ang <- acos(Hor.vector/Normal.vector)
  Deg <- 180*(Ang)/pi
  Slope <- 90-Deg
  return(Slope)
}
TR.SLOPE <- apply(TR.NORM, 1, slope.fun)
CROWN.DATA <- data.frame(SURF2D, SURF3D, TR.ELEV, TR.SLOPE, TR.UNGAR)
OCC.DATA <- CROWN.DATA[CROWN.DATA$TR.ELEV>THRESH,]
AV.SLOPE <- round(mean(OCC.DATA$TR.SLOPE), digits = 4)
AV.GUY <- round((sum(OCC.DATA$SURF3D[OCC.DATA$TR.SLOPE<45])*mean(OCC.DATA$TR.ELEV[OCC.DATA$TR.SLOPE<45])) / (sum(OCC.DATA$SURF3D[OCC.DATA$TR.SLOPE>45])*mean(OCC.DATA$TR.ELEV[OCC.DATA$TR.SLOPE>45])), digits = 4)
RRATE <- round(mean(OCC.DATA$TR.ELEV-THRESH)/mean(OCC.DATA$TR.ELEV), digits = 4)

area2D <- function(x){
  surface.node <- x$vb
  surface.node <- surface.node[1:2,]
  surface.node <- t(surface.node)
  Hull <- grDevices::chull(x = surface.node[, 1], y = surface.node[, 2])
  #  plot(surface.node[Hull,])
  #  sp::polygons(surface.node[,1], surface.node[,2], density = NULL, angle = 45, border = NULL, col = NA, lty = par("lty"), fillOddEven = FALSE)
  surface.node <- rbind(surface.node, surface.node[1,])
  Poly <- sp::Polygon(surface.node[Hull,], hole = F)
  Surface2D <- Poly@area
  return(Surface2D)
}
SURF3D <- sum((Rvcg::vcgArea(OCC.PLY, perface = T))$pertriangle)
SURF2D <- area2D(OCC.PLY)
AV.UNGAR <- round(SURF3D/SURF2D, digits = 4)
AV.BOYER <- round(log(sqrt(SURF3D)/sqrt(SURF2D)), digits = 4)
OPCR <- molaR::OPCr(OCC.PLY)

# Display results----
DATA.LINE <- cbind(NAME, AV.SLOPE, AV.UNGAR, AV.BOYER, AV.GUY, RRATE, OPCR$OPCR); DATA.LINE
tcltk::tkmessageBox(title = "", message = "Done!", icon = "info", type = "ok")
# End----
